#!/usr/bin/env python3
"""
Script de teste para verificar integra√ß√£o do sistema de voz
"""

import sys
import os

# Corrigir path para importa√ß√µes do backend - compat√≠vel com Windows e Linux
sys.path.append(os.path.join(os.path.dirname(__file__), "backend"))
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_voice_imports():
    """Testa se todas as importa√ß√µes necess√°rias funcionam"""
    print("üîç Testando importa√ß√µes do sistema de voz...")
    
    try:
        from backend.src.routes.ai_voice import ai_voice_bp
        print("‚úÖ ai_voice_bp importado com sucesso")
    except ImportError as e:
        print(f"‚ùå Erro ao importar ai_voice_bp: {e}")
        return False
    
    try:
        from backend.src.services.voice_engine import generate_lua_voice, voice_engine
        print("‚úÖ voice_engine importado com sucesso")
    except ImportError as e:
        print(f"‚ùå Erro ao importar voice_engine: {e}")
        return False
    
    return True

def test_voice_engine_status():
    """Testa se o voice engine est√° funcionando"""
    print("\nüéôÔ∏è Testando status do voice engine...")
    
    try:
        from backend.src.services.voice_engine import voice_engine
        
        if voice_engine is None:
            print("‚ö†Ô∏è Voice engine √© None - usando modo fallback")
            return True
        
        status = voice_engine.get_voice_status()
        print(f"‚úÖ Voice engine status: {status}")
        
        # Teste de gera√ß√£o de √°udio
        test_text = "Teste de integra√ß√£o da LUA"
        audio_path = voice_engine.generate_speech(test_text, "confident")
        
        if audio_path:
            print(f"‚úÖ √Åudio de teste gerado: {audio_path}")
            return True
        else:
            print("‚ö†Ô∏è N√£o foi poss√≠vel gerar √°udio - usando fallback")
            return True
            
    except Exception as e:
        print(f"‚ö†Ô∏è Erro no voice engine: {e}")
        return True  # N√£o √© erro cr√≠tico, fallback funciona

def test_jarvis_voice_file():
    """Verifica se o arquivo de voz do Jarvis existe"""
    print("\nüé§ Verificando arquivo de voz do Jarvis...")
    
    jarvis_path = os.path.join(os.path.dirname(__file__), "jarvis_voice.mp3")
    
    if os.path.exists(jarvis_path):
        size = os.path.getsize(jarvis_path)
        print(f"‚úÖ jarvis_voice.mp3 encontrado ({size} bytes)")
        return True
    else:
        print("‚ö†Ô∏è jarvis_voice.mp3 n√£o encontrado - TTS usar√° fallback")
        return True  # N√£o √© erro cr√≠tico

def test_frontend_integration():
    """Verifica se os arquivos do frontend foram modificados corretamente"""
    print("\nüåê Verificando integra√ß√£o do frontend...")
    
    # Verificar JarvisAI_Enhanced.jsx
    jarvis_path = "frontend/src/components/JarvisAI_Enhanced.jsx"
    if os.path.exists(jarvis_path):
        with open(jarvis_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        checks = [
            ('playAudio', 'Fun√ß√£o playAudio implementada'),
            ('backendVoiceAvailable', 'Estado backend voice implementado'),
            ('/api/voice/speak', 'Integra√ß√£o com API de voz'),
            ('processCRUDCommand', 'Comandos CRUD implementados'),
            ('extractEmployeeName', 'Extra√ß√£o de nomes implementada')
        ]
        
        for check, description in checks:
            if check in content:
                print(f"‚úÖ {description}")
            else:
                print(f"‚ùå {description} - N√ÉO ENCONTRADO")
                return False
    else:
        print(f"‚ùå Arquivo {jarvis_path} n√£o encontrado")
        return False
    
    # Verificar App.jsx
    app_path = "frontend/src/App.jsx"
    if os.path.exists(app_path):
        with open(app_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        if 'modalFilters' in content and 'handleModalOpen' in content:
            print("‚úÖ App.jsx com suporte a filtros implementado")
        else:
            print("‚ùå App.jsx n√£o tem suporte completo a filtros")
            return False
    else:
        print(f"‚ùå Arquivo {app_path} n√£o encontrado")
        return False
    
    # Verificar Vales.jsx
    vales_path = "frontend/src/components/Vales.jsx"
    if os.path.exists(vales_path):
        with open(vales_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        if 'processLuaFilters' in content and 'handleCreateValeWithPrefill' in content:
            print("‚úÖ Vales.jsx com processamento LUA implementado")
        else:
            print("‚ùå Vales.jsx n√£o tem processamento LUA completo")
            return False
    else:
        print(f"‚ùå Arquivo {vales_path} n√£o encontrado")
        return False
    
    return True

def main():
    """Executa todos os testes"""
    print("üöÄ TESTE DE INTEGRA√á√ÉO - SISTEMA DE VOZ LUA\n")
    
    tests = [
        ("Importa√ß√µes", test_voice_imports),
        ("Voice Engine", test_voice_engine_status),
        ("Arquivo Jarvis", test_jarvis_voice_file),
        ("Frontend", test_frontend_integration)
    ]
    
    results = []
    for name, test_func in tests:
        try:
            result = test_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå Erro no teste {name}: {e}")
            results.append((name, False))
    
    print("\n" + "="*50)
    print("üìä RESUMO DOS TESTES:")
    print("="*50)
    
    all_passed = True
    for name, passed in results:
        status = "‚úÖ PASSOU" if passed else "‚ùå FALHOU"
        print(f"{name:.<20} {status}")
        if not passed:
            all_passed = False
    
    print("\n" + "="*50)
    if all_passed:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ Sistema de voz integrado e funcionando")
        print("\nüìù PR√ìXIMOS PASSOS:")
        print("1. Iniciar backend: cd backend && python main.py")
        print("2. Iniciar frontend: cd frontend && npm start")
        print("3. Ativar LUA: Diga 'Lua' no microfone")
        print("4. Testar comando: 'Lua registrar vale de 100 reais para Jo√£o'")
    else:
        print("‚ö†Ô∏è ALGUNS TESTES FALHARAM")
        print("üîß Revise os arquivos indicados acima")
    
    print("="*50)

if __name__ == "__main__":
    main()